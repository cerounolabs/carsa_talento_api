CREATE SEQUENCE sistema.LOCPAICOD_sequence;
CREATE SEQUENCE auditoria.LOCPAIAID_sequence;

CREATE TABLE sistema.LOCPAI (
  LOCPAICOD integer NOT NULL DEFAULT nextval('sistema.LOCPAICOD_sequence'::regclass),
  LOCPAIEST integer NOT NULL,
  LOCPAICO1 integer,
  LOCPAINOM character varying(100) COLLATE pg_catalog."default" NOT NULL,
  LOCPAIBCP character (3) COLLATE pg_catalog."default",
  LOCPAIGEN character varying(100) COLLATE pg_catalog."default",
  LOCPAIOBS character varying(5120) COLLATE pg_catalog."default",
  LOCPAIAUS character(20) COLLATE pg_catalog."default" NOT NULL,
  LOCPAIAFH timestamp without time zone NOT NULL,
  LOCPAIAIP character(20) COLLATE pg_catalog."default" NOT NULL,
  CONSTRAINT LOCPAICOD_pk PRIMARY KEY (LOCPAICOD)
);

CREATE TABLE auditoria.LOCPAI (
  LOCPAIAID integer NOT NULL DEFAULT nextval('auditoria.LOCPAIAID_sequence'::regclass),
  LOCPAIAME character(20) COLLATE pg_catalog."default" NOT NULL,
  LOCPAIAUS character(20) COLLATE pg_catalog."default" NOT NULL,
  LOCPAIAFH timestamp without time zone NOT NULL,
  LOCPAIAIP character(20) COLLATE pg_catalog."default" NOT NULL,
  LOCPAICOD integer,
  LOCPAIEST integer,
  LOCPAICO1 integer,
  LOCPAINOM character varying(100) COLLATE pg_catalog."default",
  LOCPAIBCP character (3) COLLATE pg_catalog."default",
  LOCPAIGEN character varying(100) COLLATE pg_catalog."default",
  LOCPAIOBS character varying(5120) COLLATE pg_catalog."default",
  CONSTRAINT LOCPAIAID_pk PRIMARY KEY (LOCPAIAID)
);

COMMENT ON TABLE sistema.LOCPAI IS 'LOCALIDAD PAIS';
COMMENT ON TABLE auditoria.LOCPAI IS 'LOCALIDAD PAIS';

ALTER TABLE sistema.LOCPAI ADD CONSTRAINT LOCPAIEST_fk FOREIGN KEY (LOCPAIEST) REFERENCES sistema.DOMFIC(DOMFICCOD);

ALTER TABLE sistema.LOCPAI OWNER to user_thholox;
ALTER TABLE auditoria.LOCPAI OWNER to user_thholox;

CREATE OR REPLACE FUNCTION auditoria.LOCPAI_functions() RETURNS TRIGGER AS $LOCPAI_functions$
  DECLARE
  BEGIN

    IF (TG_OP = 'INSERT') THEN
        INSERT INTO auditoria.LOCPAI(LOCPAIAME, LOCPAIAUS, LOCPAIAFH, LOCPAIAIP, LOCPAICOD, LOCPAIEST, LOCPAICO1, LOCPAINOM, LOCPAIBCP, LOCPAIGEN, LOCPAIOBS)
        VALUES ('INSERT AFTER', NEW.LOCPAIAUS, NOW(), NEW.LOCPAIAIP, NEW.LOCPAICOD, NEW.LOCPAIEST, NEW.LOCPAICO1, NEW.LOCPAINOM, NEW.LOCPAIBCP, NEW.LOCPAIGEN, NEW.LOCPAIOBS);
        RETURN NULL;
    
    ELSEIF (TG_OP = 'UPDATE') THEN
        INSERT INTO auditoria.LOCPAI(LOCPAIAME, LOCPAIAUS, LOCPAIAFH, LOCPAIAIP, LOCPAICOD, LOCPAIEST, LOCPAICO1, LOCPAINOM, LOCPAIBCP, LOCPAIGEN, LOCPAIOBS)
        VALUES ('UPDATE BEFORE', OLD.LOCPAIAUS, NOW(), OLD.LOCPAIAIP, OLD.LOCPAICOD, OLD.LOCPAIEST, OLD.LOCPAICO1, OLD.LOCPAINOM, OLD.LOCPAIBCP, OLD.LOCPAIGEN, OLD.LOCPAIOBS);
        
        INSERT INTO auditoria.LOCPAI(LOCPAIAME, LOCPAIAUS, LOCPAIAFH, LOCPAIAIP, LOCPAICOD, LOCPAIEST, LOCPAICO1, LOCPAINOM, LOCPAIBCP, LOCPAIGEN, LOCPAIOBS)
        VALUES ('UPDATE AFTER', NEW.LOCPAIAUS, NOW(), NEW.LOCPAIAIP, NEW.LOCPAICOD, NEW.LOCPAIEST, NEW.LOCPAICO1, NEW.LOCPAINOM, NEW.LOCPAIBCP, NEW.LOCPAIGEN, NEW.LOCPAIOBS);
        RETURN NULL;

    ELSEIF (TG_OP = 'DELETE') THEN
        INSERT INTO auditoria.LOCPAI(LOCPAIAME, LOCPAIAUS, LOCPAIAFH, LOCPAIAIP, LOCPAICOD, LOCPAIEST, LOCPAICO1, LOCPAINOM, LOCPAIBCP, LOCPAIGEN, LOCPAIOBS)
        VALUES ('DELETE BEFORE', OLD.LOCPAIAUS, NOW(), OLD.LOCPAIAIP, OLD.LOCPAICOD, OLD.LOCPAIEST, OLD.LOCPAICO1, OLD.LOCPAINOM, OLD.LOCPAIBCP, OLD.LOCPAIGEN, OLD.LOCPAIOBS);
        RETURN NULL;
    
    END IF;
  END;

$LOCPAI_functions$ LANGUAGE plpgsql;

CREATE TRIGGER LOCPAI_trigger_before
    BEFORE UPDATE OR DELETE ON sistema.LOCPAI
    FOR EACH ROW
    EXECUTE PROCEDURE auditoria.LOCPAI_functions();

CREATE TRIGGER LOCPAI_trigger_after
    AFTER INSERT ON sistema.LOCPAI
    FOR EACH ROW
    EXECUTE PROCEDURE auditoria.LOCPAI_functions();
